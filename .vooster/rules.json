{
  "rules": [
    {
      "type": "prd",
      "content": "# 제품 요구사항 문서(PRD)\n\n## 1. 개요\nInschoolz는 대한민국 초·중·고 학생 및 졸업생을 위한 3계층 커뮤니티(학교∙지역∙전국)를 제공하는 웹·앱 서비스이다. 동급생 간 안전한 소통, 지역 정보 교류, 전국 단위 이슈 공유를 지원하며 경험치·랭킹 시스템으로 활발한 참여를 유도한다.\n도메인: www.inschoolz.com\n\n## 2. 문제 정의\n- 초·중·고 학생 대상 전용 커뮤니티 부재  \n- 학교별 익명 소통 공간 부족 → 정보 단절, 외부 서비스 의존  \n- 기존 대학생 플랫폼(예: 에브리타임)이 있으나, 초·중·고교 현황·연령 특화 기능 미흡  \n- 학생 인증 생략, 유입 활성화를 위함\n\n## 3. 대상 사용자\n### Primary\n- 국내 초·중·고 재학생(7–19세): 교내 정보, 공부/진로 상담, 친구 찾기\n### Secondary\n- 졸업생(19–24세): 선배 조언, 교내 추억 공유  \n- 교사/학부모(뷰 전용): 학생 동향 파악(향후 옵션)  \n\n## 4. 사용자 스토리\n- “초등학생으로서, 우리 반만 보는 게시판에 익명 글을 올려 마음 편히 고민을 나누고 싶다.”\n- “중학생으로서, 같은 지역 친구와 학원 정보 교환을 하고 싶다.”\n- “고등학생으로서, 전국 커뮤니티에서 입시 자료를 찾아 진로 선택에 도움을 받고 싶다.”\n- “졸업생으로서, 모교 게시판에 대학 생활 팁을 공유해 후배를 돕고 싶다.”\n- “유저로서, 글/댓글로 경험치를 쌓아 우리 학교 랭킹 1위를 달성하고 싶다.”\n\n## 5. 기능 요구사항\n### 핵심 기능 (회원가입)\n1. 학교 선택: firebase schools 컬렉션에서 KOR_NAME을 검색하여 본인의 학교를 선택. 이미 firebase로 1만개 이상 학교 등록 완료상태.\n2. 지역 선택: firebase regions 컬렉션에서 name을 선택 -> sigungu 세부선택하여 지역을 선택\n3. 추천 아이디: 친구를 추천하면 서로 경험치가 올라가게 로직 구현.\n### 핵심 기능 (커뮤니티)\n1. 커뮤니티 공통 사항\n   - 게시글, 댓글 및 대댓글, 좋아요, 스크랩, 신고 기능\n   - 사진 업로드 가능 (게시글 리스트에서 약 2개까지 미리보기 가능)\n2. 학교 커뮤니티  \n   - 즐겨찾기에 특정 학교를 저장해놓은 학생·졸업생만 접근 가능한 커뮤니티\n   - 중학생일 경우엔 본인이 나온 초등학교, 중학교가 즐겨찾기에 등록되어있을테니 학교 커뮤니티에서 토글로 선택하여 두 학교를 왔다갔다하면서 볼 수 있음. 각 유저별 즐겨찾기 가능 학교는 5개까지만 혀용.\n3. 지역 커뮤니티  \n   - 본인 주소에 등록되어있는 유저들끼리만 보는 커뮤니티\n4. 전국 커뮤니티  \n   - 모든 사용자가 접근 가능한 커뮤니티\n### 핵심 기능 (랭킹&경험치)\n1. 경험치·랭킹 시스템  \n   - 1->2레벨 10exp, 2->3레벨 20exp 오름차순. 경험치 변수는 현재 경험치, 누적 경험치, 레벨 3개로 관리.\n   - 커뮤니티 관련: 게시글 작성+10XP (하루3회), 댓글+5XP (하루5회), 좋아요+1XP\n   - 게임 관련: 게임마다 기준치를 충족 시 특정 경험치 지급\n   - 출석 체크: 마이페이지에서 매일 출셕체크 시 경험치 지급, 일주일 연속 시마다 추가 지급\n   - 경험치 및 레벨은 header의 오른쪽 프로필 아이콘 바로 왼쪽에 작게 나오게 (레벨+경험치bar). 마이페이지에선 크게확인.\n2. 리더보드  \n   - 리더보드 페이지에서 랭킹 조회 가능\n   - 랭킹에는 본인이 메인으로 등록한 학교 이름이 뜨게 하여, 자랑할 수 있게 학교별 경쟁심리 극대화.\n### 핵심 기능 (미니게임)\n   - 반응속도 게임, 타일 맞추기 등 간단한 게임 도입\n   - 일정 점수 이상 시 경험치 지급\n   - 하루 5회 플레이 제한, 또 하려면 동영상 광고 보게 해서 광고수익 극대화\n\n## 6. 기술 고려사항\n- 프론트: React Native(모바일), Next.js(웹 SSR)\n- 백엔드: Firebase(Cloud Firestore, Cloud Functions, FCM)  \n- 실시간: Firestore 실시간 리스너  \n- 이미지/파일: Firebase Storage\n- 분석: Firebase Analytics\n## 8. 데이터베이스 설계 (Firestore 구조)\n\n### 8.1 주요 컬렉션 및 설계 rationale\n\n- **users**: 사용자 기본 정보, 활동 통계, 제한, 게임 최고점, 친구/팔로우/스크랩, 알림, 경고, 신고 등 통합 관리. Firebase Authentication과 연동.\n- **boards**: 게시판(전국/지역/학교/기타) 메타데이터 및 접근 권한, 옵션, 통계 저장.\n- **posts**: 게시글 본문 및 메타데이터, 하위 subcollection으로 댓글, 좋아요, 투표 참여, 신고 기록. 댓글은 post 하위에 저장하며, 전체 검색/관리 목적의 별도 comments 컬렉션도 활용.\n- **schools**: 학교 정보(코드/이름/주소/통계 등) 및 학교별 게임 기록 집계.\n- **regions**: 시/도 및 하위 시군구 정보 저장. 지역 커뮤니티 분리 목적.\n- **hottestPosts**: 인기글(조회수+좋아요+댓글) 별도 관리. 실시간 인기글 피드 용.\n- **boardAggregates**: 게시판 월별 집계/통계 데이터. 대시보드, 트렌드 분석 용.\n- **tags**: 커뮤니티 태그 관리 및 차단 기능 지원.\n- **system**: 경험치/레벨/광고/버전 등 사이트 전역 설정.\n- **attendance**: 출석체크, 연속 출석 기록, streak 관리.\n- **gameRankings**: 미니게임별 일간/주간/전체 랭킹 보드. 실시간 경쟁심 유도.\n\n### 8.2 효율성/비효율성 판단 및 구조 최적화\n- **불필요/중복 또는 비효율 컬렉션은 미사용**\n  - game별 점수(예: flappyBirdScores 등)는 posts의 gameStats 및 schools/boardAggregates에서 통합 집계. 필요 시 랭킹만 별도 유지(gameRankings).\n  - userAdActivity, adStats 등 광고 관련 세부 통계는 adStats, system.ads 등 집계형으로만 유지. 개별 사용 기록은 최소화.\n  - userScraps, scrapFolders는 users의 scraps, favorites 필드로 충분히 커버 가능. 별도 컬렉션은 미사용.\n  - comments(전체): post 하위 subcollection으로 충분. 단, 전체 검색/감시 목적이면 별도 컬렉션 유지.\n  - userRelationships, userInvitations는 users.social, favorites, warnings 등으로 통합. 대용량 관계형 네트워크가 필요할 경우에만 별도 컬렉션 운영.\n  - searchHistory, popularSearches는 트래픽 많을 경우만 별도 집계. 1차 릴리즈에서는 미포함.\n  - chatMessages, chatRooms는 MVP 범위 밖으로 일단 제외(향후 확장 가능성 열어둠).\n\n### 8.3 최종 Firestore 핵심 구조(2024.06)\n\n- users/{userId}\n    - profile, regions, school, stats, activityLimits, gameStats, favorites, warnings, social, scraps, preferences\n    - subcollections: notifications, warningHistory, reportedItems\n- boards/{boardCode}\n    - 게시판 메타데이터(유형/권한/옵션/통계/지역/학교 등)\n- posts/{postId}\n    - 게시글 데이터(작성자, 내용, 익명, 이미지, 상태, 통계, 태그, 투표 등)\n    - subcollections: comments, likes, votes, reports\n- schools/{schoolId}\n    - 학교 정보 및 게임/활동 집계\n- regions/{regionId}\n    - 시/도 및 시군구 정보\n- hottestPosts/{autoId}\n    - 인기글 관리(실시간 랭킹)\n- boardAggregates/{boardCode_YYYYMM}\n    - 게시판별 월간/일별/상위 작성자 통계\n- tags/{tagName}\n    - 태그 관리 및 차단 기능\n- system/settings\n    - 경험치, 광고, 레벨, 버전 등 전역설정\n- attendance/{userId}\n    - 출석 체크 및 streak\n- gameRankings/{gameType}\n    - 랭킹 보드(일간/주간/역대)\n\n*추가로 MVP/런칭시점에서는 광고 상세 통계, 친구관계, 전체 댓글/스크랩/검색 기록/채팅 등은 생략 또는 단순화하여 운영. 필요 시 점진적으로 도입.*\n\n## 9. 커뮤니티 도메인/구조 설계\n\n### 9.1 커뮤니티 계층 및 도메인 구조\n\n- **계층적 도메인 구조:**\n  - 전국 커뮤니티: `/community/national/{boardCode}`\n  - 지역 커뮤니티: `/community/region/{sido}/{sigungu}/{boardCode}`\n  - 학교 커뮤니티: `/community/school/{schoolId}/{boardCode}`\n\n#### 9.2 주요 관리 포인트 및 rationale\n- **boardCode** 기반 단일 커뮤니티 엔드포인트 설계: 모든 게시판은 boards 컬렉션의 boardCode로 통합 관리, boardType(national/regional/school) 및 접근 권한 필드로 구분.\n- **URL Path Parameter 활용:**\n  - 전국/지역/학교 구분 및 boardCode를 path로 표현하여, URL만으로 커뮤니티 유형·위치·게시판 명확 식별 가능\n  - 지역 커뮤니티의 경우, sido(시/도), sigungu(시군구)를 path에 포함시켜 효율적 regional filtering 지원\n- **게시판 즐겨찾기/접근 제한:**\n  - 각 유저는 users.favorites.schools(학교), favorites.boards(게시판) 배열을 통해 즐겨찾는 커뮤니티 접근 및 권한 관리\n- **관리자·통계 효율화:**\n  - boardCode 단위로 통계, 인기글, 집계, 권한 제어가 단순해지고, 관리 UI/API 일관성 확보\n\n#### 9.3 예시 URL 구조\n- 전국 자유게시판: `/community/national/free`\n- 서울특별시 강남구 학원정보: `/community/region/서울특별시/강남구/academy`\n- 가락고등학교 자유게시판: `/community/school/00001/free`\n\n*이와 같은 계층적 도메인 구조는 관리 효율성, 확장성, 사용자 접근성(즐겨찾기/URL 공유) 모두를 고려한 최적화 방안임.*\n\n## 10. SEO(검색엔진 최적화) 전략\n\n### 10.1 주요 목표\n- 커뮤니티 내 공개 게시글(전국/지역/학교 자유게시판 등)의 제목, 주요 본문 내용, 학교명/지역명 등이 검색엔진에 최대한 노출되도록 하여 신규 유입/브랜드 인지도 제고\n\n### 10.2 상세 요구사항 및 방안\n- **SSR(서버사이드 렌더링) 적용:**\n  - Next.js 기반 SSR을 활용하여 커뮤니티 게시글 페이지의 메타태그, Open Graph, 구조화 데이터(JSON-LD) 자동 생성\n- **게시글별 SEO 메타데이터:**\n  - `<title>`: 게시글 제목, 학교명/지역명, 커뮤니티명 조합 (예시: `[제목] - [학교명/지역명] - Inschoolz`)\n  - `<meta name=\\\"description\\\">`: 게시글 본문 요약(최대 150자), 작성자 닉네임, 게시일 포함\n  - `<meta property=\\\"og:title\\\">`, `<meta property=\\\"og:description\\\">`, `<meta property=\\\"og:image\\\">` 등 SNS/검색엔진 미리보기 최적화\n- **게시글 URL 구조:**\n  - 게시글 상세 URL에 boardType/학교ID/지역명 등 포함, 예: `/community/school/00001/free/abcdefg` (abcdefg=postId)\n- **robots.txt/sitemap.xml 자동화:**\n  - 공개 커뮤니티 게시판/게시글만 크롤링 허용, 비공개/익명/민감게시판은 robots.txt 통해 비색인 처리\n  - sitemap.xml을 동적으로 생성해 검색엔진에 최신 게시글/주요 커뮤니티 구조 노출\n- **검색엔진 색인 정책:**\n  - 게시글 공개 범위(board.accessLevel.read = all)만 색인 허용\n  - 익명 게시글, 민감/비공개 게시판, 개인정보 포함 게시글은 meta robots=noindex 적용\n\n### 10.3 성공 기준\n- 주요 커뮤니티 게시글, 학교명, 지역명 등으로 검색 시 Inschoolz 게시글이 구글/네이버 등에서 상위 노출\n- 신규 유입 트래픽에서 검색엔진 유입 비율 30% 이상 달성\n\n*이와 같은 SEO 전략을 통해 커뮤니티의 검색 노출/브랜드 확산/신규 유입 극대화를 기대함.*\n\n\n### 주요 목표\n- 커뮤니티 내 공개 게시글(전국/지역/학교 자유게시판 등)의 제목, 주요 본문 내용, 학교명/지역명 등이 검색엔진에 최대한 노출되도록 하여 신규 유입/브랜드 인지도 제고\n\n### 상세 요구사항 및 방안\n- **SSR(서버사이드 렌더링) 적용:**\n  - Next.js 기반 SSR을 활용하여 커뮤니티 게시글 페이지의 메타태그, Open Graph, 구조화 데이터(JSON-LD) 자동 생성\n- **게시글별 SEO 메타데이터:**\n  - `<title>`: 게시글 제목, 학교명/지역명, 커뮤니티명 조합 (예시: `[제목] - [학교명/지역명] - Inschoolz`)\n  - `<meta name=\"description\">`: 게시글 본문 요약(최대 150자), 작성자 닉네임, 게시일 포함\n  - `<meta property=\"og:title\">`, `<meta property=\"og:description\">`, `<meta property=\"og:image\">` 등 SNS/검색엔진 미리보기 최적화\n- **게시글 URL 구조:**\n  - 게시글 상세 URL에 boardType/학교ID/지역명 등 포함, 예: `/community/school/00001/free/abcdefg` (abcdefg=postId)\n- **robots.txt/sitemap.xml 자동화:**\n  - 공개 커뮤니티 게시판/게시글만 크롤링 허용, 비공개/익명/민감게시판은 robots.txt 통해 비색인 처리\n  - sitemap.xml을 동적으로 생성해 검색엔진에 최신 게시글/주요 커뮤니티 구조 노출\n- **검색엔진 색인 정책:**\n  - 게시글 공개 범위(board.accessLevel.read = all)만 색인 허용\n  - 익명 게시글, 민감/비공개 게시판, 개인정보 포함 게시글은 meta robots=noindex 적용\n\n### 성공 기준\n- 주요 커뮤니티 게시글, 학교명, 지역명 등으로 검색 시 Inschoolz 게시글이 구글/네이버 등에서 상위 노출\n- 신규 유입 트래픽에서 검색엔진 유입 비율 30% 이상 달성\n\n*이와 같은 SEO 전략을 통해 커뮤니티의 검색 노출/브랜드 확산/신규 유입 극대화를 기대함.*\n\n\n### 커뮤니티 계층 및 도메인 구조\n\n- **계층적 도메인 구조:**\n  - 전국 커뮤니티: `/community/national/{boardCode}`\n  - 지역 커뮤니티: `/community/region/{sido}/{sigungu}/{boardCode}`\n  - 학교 커뮤니티: `/community/school/{schoolId}/{boardCode}`\n\n#### 주요 관리 포인트 및 rationale\n- **boardCode** 기반 단일 커뮤니티 엔드포인트 설계: 모든 게시판은 boards 컬렉션의 boardCode로 통합 관리, boardType(national/regional/school) 및 접근 권한 필드로 구분.\n- **URL Path Parameter 활용:**\n  - 전국/지역/학교 구분 및 boardCode를 path로 표현하여, URL만으로 커뮤니티 유형·위치·게시판 명확 식별 가능\n  - 지역 커뮤니티의 경우, sido(시/도), sigungu(시군구)를 path에 포함시켜 효율적 regional filtering 지원\n- **게시판 즐겨찾기/접근 제한:**\n  - 각 유저는 users.favorites.schools(학교), favorites.boards(게시판) 배열을 통해 즐겨찾는 커뮤니티 접근 및 권한 관리\n- **관리자·통계 효율화:**\n  - boardCode 단위로 통계, 인기글, 집계, 권한 제어가 단순해지고, 관리 UI/API 일관성 확보\n\n#### 예시 URL 구조\n- 전국 자유게시판: `/community/national/free`\n- 서울특별시 강남구 학원정보: `/community/region/서울특별시/강남구/academy`\n- 가락고등학교 자유게시판: `/community/school/00001/free`\n\n*이와 같은 계층적 도메인 구조는 관리 효율성, 확장성, 사용자 접근성(즐겨찾기/URL 공유) 모두를 고려한 최적화 방안임.*\n\n\n### 주요 컬렉션 및 설계 rationale\n\n- **users**: 사용자 기본 정보, 활동 통계, 제한, 게임 최고점, 친구/팔로우/스크랩, 알림, 경고, 신고 등 통합 관리. Firebase Authentication과 연동.\n- **boards**: 게시판(전국/지역/학교/기타) 메타데이터 및 접근 권한, 옵션, 통계 저장.\n- **posts**: 게시글 본문 및 메타데이터, 하위 subcollection으로 댓글, 좋아요, 투표 참여, 신고 기록. 댓글은 post 하위에 저장하며, 전체 검색/관리 목적의 별도 comments 컬렉션도 활용.\n- **schools**: 학교 정보(코드/이름/주소/통계 등) 및 학교별 게임 기록 집계.\n- **regions**: 시/도 및 하위 시군구 정보 저장. 지역 커뮤니티 분리 목적.\n- **hottestPosts**: 인기글(조회수+좋아요+댓글) 별도 관리. 실시간 인기글 피드 용.\n- **boardAggregates**: 게시판 월별 집계/통계 데이터. 대시보드, 트렌드 분석 용.\n- **tags**: 커뮤니티 태그 관리 및 차단 기능 지원.\n- **system**: 경험치/레벨/광고/버전 등 사이트 전역 설정.\n- **attendance**: 출석체크, 연속 출석 기록, streak 관리.\n- **gameRankings**: 미니게임별 일간/주간/전체 랭킹 보드. 실시간 경쟁심 유도.\n\n#### 효율성/비효율성 판단 및 구조 최적화\n- **불필요/중복 또는 비효율 컬렉션은 미사용**\n  - game별 점수(예: flappyBirdScores 등)는 posts의 gameStats 및 schools/boardAggregates에서 통합 집계. 필요 시 랭킹만 별도 유지(gameRankings).\n  - userAdActivity, adStats 등 광고 관련 세부 통계는 adStats, system.ads 등 집계형으로만 유지. 개별 사용 기록은 최소화.\n  - userScraps, scrapFolders는 users의 scraps, favorites 필드로 충분히 커버 가능. 별도 컬렉션은 미사용.\n  - comments(전체): post 하위 subcollection으로 충분. 단, 전체 검색/감시 목적이면 별도 컬렉션 유지.\n  - userRelationships, userInvitations는 users.social, favorites, warnings 등으로 통합. 대용량 관계형 네트워크가 필요할 경우에만 별도 컬렉션 운영.\n  - searchHistory, popularSearches는 트래픽 많을 경우만 별도 집계. 1차 릴리즈에서는 미포함.\n  - chatMessages, chatRooms는 MVP 범위 밖으로 일단 제외(향후 확장 가능성 열어둠).\n\n#### 최종 Firestore 핵심 구조(2024.06)\n\n- users/{userId}\n    - profile, regions, school, stats, activityLimits, gameStats, favorites, warnings, social, scraps, preferences\n    - subcollections: notifications, warningHistory, reportedItems\n- boards/{boardCode}\n    - 게시판 메타데이터(유형/권한/옵션/통계/지역/학교 등)\n- posts/{postId}\n    - 게시글 데이터(작성자, 내용, 익명, 이미지, 상태, 통계, 태그, 투표 등)\n    - subcollections: comments, likes, votes, reports\n- schools/{schoolId}\n    - 학교 정보 및 게임/활동 집계\n- regions/{regionId}\n    - 시/도 및 시군구 정보\n- hottestPosts/{autoId}\n    - 인기글 관리(실시간 랭킹)\n- boardAggregates/{boardCode_YYYYMM}\n    - 게시판별 월간/일별/상위 작성자 통계\n- tags/{tagName}\n    - 태그 관리 및 차단 기능\n- system/settings\n    - 경험치, 광고, 레벨, 버전 등 전역설정\n- attendance/{userId}\n    - 출석 체크 및 streak\n- gameRankings/{gameType}\n    - 랭킹 보드(일간/주간/역대)\n\n*추가로 MVP/런칭시점에서는 광고 상세 통계, 친구관계, 전체 댓글/스크랩/검색 기록/채팅 등은 생략 또는 단순화하여 운영. 필요 시 점진적으로 도입.*\n\n## 7. 디자인\n- 폰트: 잼민이 글씨\n- 색상: 파스텔 그린\n- navbar: 홈, 커뮤니티, 미니게임, 랭킹, 마이페이지",
      "writedAt": "2025-07-01T13:03:01.468Z"
    },
    {
      "type": "architecture",
      "content": "# 기술 요구사항 문서 (TRD)\n\n## 1. Executive Technical Summary\n- 프로젝트 개요  \n  - Inschoolz는 초·중·고 학생/졸업생을 위한 3-계층 커뮤니티(학교·지역·전국) 서비스이다. 프론트엔드는 Next.js 15(웹)와 React Native Expo(모바일)로 구축하며, 백엔드는 Firebase(Firestore·Auth·Storage·Cloud Functions)로 구성한다.\n- 핵심 기술 스택  \n  - Next.js 15, React Native Expo, Firebase (v11+), Tailwind CSS, Shadcn UI, TypeScript, Cloud Functions (Node 18), Vercel(Web), Expo EAS(Mobile)\n- 주요 기술 목표  \n  - 평균 응답 지연 ≤ 200 ms, P95 ≤ 400 ms  \n  - 월간 100k MAU 기준 99.9 % 가용성  \n  - 실시간 업데이트 지연 ≤ 1 초(Firestore Listener)\n- 핵심 기술 가정  \n  - 앱·웹 모든 비즈니스 로직은 Firestore를 단일 소스 오브 트루스로 사용  \n  - 트래픽 급증 시 Cloud Functions 자동 스케일링(Cold Start ≤ 2 초)으로 대응  \n  - Monorepo 미사용, 각각 독립 저장소 유지\n\n## 2. Technology Stack Architecture\n\n### Frontend Technology Stack\n- Core Framework:  \n  - Web : Next.js 15 (React 18, App Router, Edge Runtime 지원)  \n  - Mobile : React Native Expo SDK 50\n- State Management: Zustand + React Query(Async 캐싱)  \n- Routing & Navigation:  \n  - Web : Next.js App Router  \n  - Mobile : Expo Router v3\n- UI/UX Framework: Shadcn UI + Tailwind CSS 3.4, Lucide Icons, Heroicons  \n- Build Tools:  \n  - Web : Vercel 빌드 파이프라인(Next.js 15 Preset)  \n  - Mobile : EAS Build(Android / iOS)\n\n### Backend Technology Stack\n- Runtime Environment: Node.js 18(LTS) on Cloud Functions  \n- Web Framework: Firebase Cloud Functions (Express Adapter)  \n- API Design Pattern: RESTful(HTTPS Callable) + Firestore 실시간 구독  \n- Data Validation: Zod 스키마 → 함수 진입 시 런타임 검증  \n- Middleware Components:  \n  - 인증 확인(Firebase Auth)  \n  - 로깅(Stackdriver)  \n  - Rate-Limiter(Firestore 기반 Token Bucket)\n\n### Database & Persistence Layer\n- Primary Database: Cloud Firestore(Native mode, regional ‑ asia-northeast3)  \n- Schema Design: 컬렉션 기반 문서 모델, 중첩 서브컬렉션, 확장 필요 시 sub-collection 분리  \n- Caching Strategy:  \n  - 클라이언트 단에서 React Query + Firestore persistence cache  \n  - Cloud Functions 내부 메모리-LRU(↑콜드스타트 시 캐시 손실 허용)  \n- Data Migration: Firebase Emulator + Firestore DART, versioned JS migration 스크립트  \n- Backup & Recovery: 자동 일일 백업(GCS), 30일 보관, Disaster復旧 Runbook 확보\n\n### Infrastructure & DevOps\n- Hosting Environment:  \n  - Web : Vercel(Production / Preview)  \n  - Mobile Assets : Expo CDN  \n  - Backend : Firebase Project(prod, staging) 다중 환경\n- Containerization: 불필요(FaaS)  \n- CI/CD Pipeline:  \n  - GitHub Actions → Lint/Test → Vercel/Expo/Firebase 배포  \n- Monitoring & Observability:  \n  - Firebase Performance Monitoring, Cloud Logging, Sentry (Web/App)  \n- Logging Strategy:  \n  - Cloud Logging → BigQuery Sink → Data Studio Dashboard\n\n## 3. System Architecture Design\n\n### Top-Level Building Blocks\n- Web Client (Next.js)  \n  - SSR/CSR 하이브리드, SWR 캐시, Firebase Web SDK\n- Mobile Client (React Native Expo)  \n  - Expo Router, FCM Push, Local DB(AsyncStorage)\n- Firebase Auth  \n- Email/Password, Google, Kakao, Apple, Naver, Facebook Sign In\n- Cloud Firestore  \n  - schools, regions, users, posts, comments, reports, xpLogs, leaderboards\n- Cloud Functions  \n  - 인증트리거, 경험치 계산, 리더보드 정산, 이미지 Moderation\n- Firebase Storage  \n  - 게시글 이미지, 프로필, 썸네일\n- FCM (Firebase Cloud Messaging)  \n  - 댓글, 좋아요, 신고 알림\n\n### Top-Level Component Interaction Diagram\n```mermaid\ngraph TD\n    A[Web / Mobile Client] -- HTTPS / WebSocket --> B[Firebase Auth & Firestore]\n    B -- Trigger --> C[Cloud Functions]\n    C -- Read/Write --> B\n    A -- Storage SDK --> D[Firebase Storage]\n    C -- FCM --> E[Push Service]\n```\n- 클라이언트는 Firestore 리스너로 실시간 데이터 수신  \n- Cloud Functions가 비동기로 경험치·랭킹 계산 후 Firestore 갱신  \n- 이미지 업로드는 Storage Signed URL 사용  \n- 알림은 Functions → FCM → 디바이스\n\n### Code Organization & Convention\n\nDomain-Driven Organization Strategy\n- 사용자, 커뮤니티, 경험치, 게임, 신고, 공통 모듈 세분화\n- Presentation ⇆ Application(Service) ⇆ Domain ⇆ Infrastructure 4계층\n\nUniversal File & Folder Structure\n```\n/web\n├── src\n│   ├── app (Next.js App Router)\n│   ├── domains\n│   │   ├── community/\n│   │   ├── user/\n│   │   ├── xp/\n│   │   └── shared/\n│   └── libs\n└── package.json\n\n/mobile\n├── src\n│   ├── router/\n│   ├── domains/ (동일 구조)\n│   └── libs/\n└── package.json\n\n/functions\n├── src\n│   ├── community/\n│   ├── xp/\n│   ├── user/\n│   └── utils/\n└── package.json\n\n/infrastructure\n└── github\n    └── workflows\n```\n\n### Data Flow & Communication Patterns\n- Client-Server: Firebase SDK → Auth Token 포함 HTTPS / WebSocket  \n- Database Interaction: Firestore SDK, batched writes & transactions  \n- External Service Integration: Vision API(이미지 모더레이션) → Cloud Functions  \n- Real-time Communication: Firestore Listener, Presence 판단은 lastSeen 필드 + Cloud Functions  \n- Data Synchronization: 모바일 오프라인 캐시 후 재접속 시 sync\n\n## 4. Performance & Optimization Strategy\n- Firestore 인덱스 설계: composite index 선선언으로 쿼리 속도 최적화  \n- Cloud Functions cold-start 최소화: Node 18, keep-warm scheduler, memory 256 MB  \n- 이미지: Storage upload 시 1080px 리사이즈, WebP 변환, CDN 캐싱  \n- 클라이언트 렌더링: Next.js Image 최적화, 코드 분할 & lazy import\n\n## 5. Implementation Roadmap & Milestones\n\n### Phase 1: Foundation (MVP) – 3 주\n- 인프라: Firebase 프로젝트 & Vercel 연결, 스테이징 환경  \n- 핵심 기능: 회원가입(학교·지역 선택), 학교 커뮤니티 글/댓글 CRUD  \n- 기본 보안: Firestore Security Rules v1, Auth 구현  \n- 개발 세팅: Lint/Prettier, GitHub Actions CI, Storybook  \n- 완료 목표: T0 + 3 주\n\n### Phase 2: Feature Enhancement – 5 주\n- 기능: 지역·전국 커뮤니티, 경험치·레벨, 리더보드  \n- 퍼포먼스: 인덱스 최적화, 이미지 CDN 적용  \n- 보안 강화: App Check, Rate Limiter, Content Moderation  \n- 모니터링: Sentry, Firebase Performance 완전 도입  \n- 완료 목표: T0 + 8 주\n\n### Phase 3: Scaling & Optimization – 4 주\n- 스케일링: Cloud Functions 메모리/인스턴스 튜닝, Firestore 파티셔닝  \n- 고급 통합: 미니게임, 광고 SDK, FCM 토큰 관리 자동화  \n- 엔터프라이즈: 데이터 백업 자동화, SLA Dashboard, IAM 세분화  \n- 컴플라이언스: GDPR/한국 개인정보보호 가이드라인 준수  \n- 완료 목표: T0 + 12 주\n\n## 6. Risk Assessment & Mitigation Strategies\n\n### Technical Risk Analysis\n- 기술 스택 의존성: Firebase 공급자 장애 → 다중 리전 백업  \n- 퍼포먼스: Firestore 비용 폭증 → 쿼리 최적화·TTL 아카이브  \n- 보안: 인증 우회·권한 상승 → Security Rules 테스트 자동화  \n- 통합: 외부 광고 SDK 충돌 → Sandbox 빌드로 사전 검증  \n- 대응: 장애 Runbook, RTO 2 h, RPO 24 h\n\n### Project Delivery Risks\n- 일정: 학교 개학 시즌 런칭 압박 → 기능 우선순위 조정  \n- 리소스: RN·Next.js 동시 개발 인력 부족 → 모듈 재사용 극대화  \n- 품질: 테스트 커버리지 저하 → E2E(Cypress, Detox) 70 % 목표  \n- 배포: Functions 트래픽 급증 → 단계적 롤아웃, Canary release  \n- 비상계획: 기능 플래그로 문제 기능 즉시 비활성화\n\n## 끝",
      "writedAt": "2025-07-01T13:03:01.469Z"
    },
    {
      "type": "guideline",
      "content": "# Inschoolz Code Guideline\n\n## 1. Project Overview\n\n**Inschoolz** is a 3-tier community platform for Korean students and alumni, built on:\n- **Frontend**: Next.js 15 (web, SSR/CSR hybrid), React Native Expo (mobile), TypeScript, Zustand, React Query, Tailwind CSS, Shadcn UI\n- **Backend**: Firebase (Firestore, Auth, Storage, Cloud Functions Node 18), Zod for validation, Express adapter, RESTful callable APIs\n- **Data**: Firestore as single source of truth, strict collection/subcollection schema\n- **Infra/DevOps**: Vercel (web), Expo EAS (mobile), GitHub Actions CI/CD, Sentry, Firebase Monitoring\n\n**Key Architectural Decisions:**\n- Domain-driven folder structure across web, mobile, functions\n- Firestore as authoritative data layer; Cloud Functions for business logic\n- Real-time updates via Firestore listeners\n- Monorepo NOT used; each target (web, mobile, functions) has its own repo\n\n---\n\n## 2. Core Principles\n\n1. **Type Safety First**: All code MUST be fully typed with TypeScript and Zod for runtime validation.\n2. **Single Responsibility**: Each module, component, or function MUST have one clear purpose.\n3. **Explicit Data Flow**: Data mutations and side effects MUST be clearly separated from UI logic.\n4. **Security by Default**: All data access MUST enforce Firebase Security Rules and validate user permissions.\n5. **Consistent Error Handling**: All async logic MUST handle errors explicitly and report them to monitoring.\n\n---\n\n## 3. Language-Specific Guidelines\n\n### 3.1 TypeScript (Web/Mobile/Functions)\n\n#### File Organization & Structure\n\n- **MUST**: Follow domain-driven folder structure.\n    - `/src/domains/{domain}/` for business logic (e.g., community, user, xp)\n    - Presentation/UI in `/src/app` (web) or `/src/router` (mobile)\n    - Shared utilities in `/src/libs` or `/src/domains/shared`\n    - Cloud Functions: `/src/{domain}/`, `/src/utils/`\n\n```plaintext\n/web\n  └── src\n      ├── app/\n      ├── domains/\n      │   ├── community/\n      │   └── user/\n      └── libs/\n```\n\n#### Import/Dependency Management\n\n- **MUST**: Use absolute imports (configured via `tsconfig.json`).\n- **MUST**: Group imports: external, internal, then styles.\n- **MUST**: Import only what is needed; avoid deep relative imports (`../../../`).\n- **MUST NOT**: Import from outside the current domain except via shared modules.\n\n```typescript\n// MUST: Grouped & absolute imports\nimport { useState } from \"react\";\nimport { getSchoolById } from \"@/domains/school/api\";\nimport \"@/styles/globals.css\";\n```\n\n```typescript\n// MUST NOT: Deep relative imports\nimport { foo } from \"../../../../utils/foo\";\n```\n\n#### Error Handling Patterns\n\n- **MUST**: All async functions MUST use `try/catch`. Errors MUST be logged (Sentry/Cloud Logging).\n- **MUST**: Use Zod or similar for all runtime data validation (especially API boundaries).\n- **MUST NOT**: Swallow errors silently or ignore Promise rejections.\n\n```typescript\n// MUST: Error handling with Zod validation\nimport { z } from \"zod\";\nconst SchoolSchema = z.object({ id: z.string(), name: z.string() });\n\nasync function fetchSchool(id: string) {\n  try {\n    const data = await getSchoolData(id);\n    const school = SchoolSchema.parse(data);\n    return school;\n  } catch (err) {\n    Sentry.captureException(err);\n    throw err;\n  }\n}\n```\n\n```typescript\n// MUST NOT: Silent error swallowing\nasync function fetchSchool(id: string) {\n  const data = await getSchoolData(id);\n  // No validation, no error handling\n  return data;\n}\n```\n\n---\n\n## 4. Code Style Rules\n\n### 4.1 MUST Follow\n\n1. **Type Annotations**: All functions and component props MUST have explicit types.  \n   *Rationale*: Prevents runtime bugs and improves code intelligence.\n\n2. **Atomic Components**: UI components MUST be small, reusable, and stateless when possible.  \n   *Rationale*: Improves testability and reusability.\n\n3. **React Query & Zustand**: All Firestore data fetching MUST use React Query. Global state (user, auth, settings) MUST use Zustand.  \n   *Rationale*: Ensures consistency and caching.\n\n4. **Tailwind CSS**: All styling MUST use Tailwind classes.  \n   *Rationale*: Enforces design consistency and eliminates CSS drift.\n\n5. **API Data Validation**: All data from external sources (Firestore, HTTP, Storage) MUST be validated with Zod.  \n   *Rationale*: Prevents data shape errors and security issues.\n\n6. **SSR/SEO**: Next.js pages that are public-facing (community, post detail) MUST use SSR and set all meta tags for SEO.  \n   *Rationale*: Ensures search engine discoverability.\n\n```typescript\n// MUST: Explicit types and validation\ntype UserProfileProps = { name: string; xp: number };\n\nconst UserProfile: React.FC<UserProfileProps> = ({ name, xp }) => (\n  <div className=\"font-bold\">{name}: {xp} XP</div>\n);\n```\n\n```typescript\n// MUST: React Query for data fetching\nconst { data: school, isLoading } = useQuery([\"school\", id], () => fetchSchool(id));\n```\n\n### 4.2 MUST NOT Do\n\n1. **No Large/Monolithic Files**:  \n   *Anti-pattern*: Combining multiple modules, UI, and business logic in a single file.\n2. **No Uncontrolled State**:  \n   *Anti-pattern*: Using React local state for global/shared data (e.g., user info).\n3. **No Direct Firestore Calls in UI Components**:  \n   *Anti-pattern*: Querying Firestore directly inside React components.\n4. **No Implicit Any**:  \n   *Anti-pattern*: Omitting types, allowing TypeScript to infer `any`.\n5. **No Magic Strings/Numbers**:  \n   *Anti-pattern*: Hardcoding collection names, XP values, etc.\n\n```typescript\n// MUST NOT: Monolithic file with multiple responsibilities\n// -- UI, data fetching, and state management all mixed\nexport function CommunityPage() {\n  const [posts, setPosts] = useState([]);\n  // ... Firestore logic here\n  // ... UI rendering\n}\n```\n\n```typescript\n// MUST: Separate concerns\n// /domains/community/api.ts\nexport async function fetchPosts(boardCode: string) { /* ... */ }\n\n// /domains/community/components/CommunityPage.tsx\nimport { fetchPosts } from \"../api\";\n```\n\n---\n\n## 5. Architecture Patterns\n\n### 5.1 Component/Module Structure\n\n- **MUST**: Organize code by domain (`/domains/{domain}/`) and layer (api, model, components, hooks).\n- **MUST**: Each file/folder has a single responsibility (e.g., `/api`, `/components`, `/model`, `/hooks`).\n\n```plaintext\n/domains/community/\n  ├── api.ts\n  ├── model.ts\n  ├── components/\n  └── hooks/\n```\n\n### 5.2 Data Flow Patterns\n\n- **MUST**: All Firestore reads/writes via domain APIs (never directly in UI).\n- **MUST**: Use React Query for all async data (web/mobile).\n- **MUST**: Use Zustand for cross-component state (e.g., current user, theme).\n- **MUST**: Use Firestore listeners for real-time updates; unsubscribe on unmount.\n\n```typescript\n// MUST: Domain API for Firestore\nexport async function getPostById(postId: string) {\n  const doc = await getDoc(docRef);\n  return PostSchema.parse(doc.data());\n}\n```\n\n### 5.3 State Management\n\n- **MUST**: Use Zustand for global state, React Query for async server state.\n- **MUST NOT**: Use Redux or custom state libraries.\n- **MUST**: Keep local UI state inside components; global state only for cross-app data.\n\n```typescript\n// MUST: Zustand store example\nimport create from \"zustand\";\n\ntype UserState = { user: User | null; setUser: (u: User) => void };\nexport const useUserStore = create<UserState>((set) => ({\n  user: null,\n  setUser: (user) => set({ user }),\n}));\n```\n\n### 5.4 API Design Standards\n\n- **MUST**: All Cloud Functions MUST be HTTPS callable, typed, and Zod-validated.\n- **MUST**: API endpoints MUST NOT expose raw Firestore data; always validate and sanitize.\n- **MUST**: Use RESTful resource naming (`/posts`, `/users/{userId}/xp`).\n\n```typescript\n// MUST: Cloud Function with Zod validation\nimport * as functions from \"firebase-functions\";\nimport { z } from \"zod\";\n\nconst InputSchema = z.object({ xp: z.number().min(0) });\n\nexport const updateXp = functions.https.onCall(async (data, context) => {\n  const input = InputSchema.parse(data);\n  // ... business logic\n  return { success: true };\n});\n```\n\n---\n\n## Example Code Snippets\n\n```typescript\n// MUST: Small, typed, and validated domain API\nimport { z } from \"zod\";\nconst PostSchema = z.object({\n  id: z.string(),\n  title: z.string(),\n  content: z.string(),\n  authorId: z.string(),\n});\n\nexport async function getPost(postId: string): Promise<Post> {\n  const snap = await getDoc(doc(db, \"posts\", postId));\n  return PostSchema.parse(snap.data());\n}\n```\n\n```typescript\n// MUST NOT: Large, untyped, multi-responsibility file\n// -- UI, data fetch, and state in one\nfunction PostsPage() {\n  const [posts, setPosts] = useState<any[]>([]);\n  useEffect(() => {\n    getDocs(collection(db, \"posts\")).then((snap) => {\n      setPosts(snap.docs.map((d) => d.data()));\n    });\n  }, []);\n  return <div>{posts.map((p) => <div>{p.title}</div>)}</div>;\n}\n```\n\n```typescript\n// MUST: SSR page with SEO meta tags (Next.js)\nexport async function generateMetadata({ params }) {\n  const post = await getPost(params.postId);\n  return {\n    title: `${post.title} - ${post.schoolName} - Inschoolz`,\n    description: `${post.content.slice(0, 150)}...`,\n    openGraph: {\n      title: post.title,\n      description: post.content,\n      image: post.imageUrl,\n    },\n  };\n}\n```\n\n```typescript\n// MUST: Error handling in async function\ntry {\n  await doSomething();\n} catch (error) {\n  Sentry.captureException(error);\n  throw error;\n}\n```\n\n---\n\n## 6. Quality Criteria\n\n- **Type Safety**: 100% codebase coverage with TypeScript and Zod.\n- **Single Responsibility**: Each file/folder/module has one clear purpose.\n- **Explicit Data Flow**: No hidden side effects; all data mutations are traceable.\n- **Consistent Error Handling**: All async logic is guarded and reported.\n- **Security**: No direct Firestore access in UI; all access controlled and validated.\n- **SEO-First**: All public pages SSR'd with complete meta tags.\n\n---\n\n**This guideline is the binding standard for all Inschoolz code. All code reviews and merges MUST enforce these rules.**",
      "writedAt": "2025-07-01T13:03:01.469Z"
    }
  ]
}