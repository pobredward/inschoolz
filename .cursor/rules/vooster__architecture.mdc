---
description:
globs:
alwaysApply: true
---
# 기술 요구사항 문서 (TRD)

## 1. Executive Technical Summary
- 프로젝트 개요  
  - Inschoolz는 초·중·고 학생/졸업생을 위한 3-계층 커뮤니티(학교·지역·전국) 서비스이다. 프론트엔드는 Next.js 15(웹)와 React Native Expo(모바일)로 구축하며, 백엔드는 Firebase(Firestore·Auth·Storage·Cloud Functions)로 구성한다.
- 핵심 기술 스택  
  - Next.js 15, React Native Expo, Firebase (v11+), Tailwind CSS, Shadcn UI, TypeScript, Cloud Functions (Node 18), Vercel(Web), Expo EAS(Mobile)
- 주요 기술 목표  
  - 평균 응답 지연 ≤ 200 ms, P95 ≤ 400 ms  
  - 월간 100k MAU 기준 99.9 % 가용성  
  - 실시간 업데이트 지연 ≤ 1 초(Firestore Listener)
- 핵심 기술 가정  
  - 앱·웹 모든 비즈니스 로직은 Firestore를 단일 소스 오브 트루스로 사용  
  - 트래픽 급증 시 Cloud Functions 자동 스케일링(Cold Start ≤ 2 초)으로 대응  
  - Monorepo 미사용, 각각 독립 저장소 유지

## 2. Technology Stack Architecture

### Frontend Technology Stack
- Core Framework:  
  - Web : Next.js 15 (React 18, App Router, Edge Runtime 지원)  
  - Mobile : React Native Expo SDK 50
- State Management: Zustand + React Query(Async 캐싱)  
- Routing & Navigation:  
  - Web : Next.js App Router  
  - Mobile : Expo Router v3
- UI/UX Framework: Shadcn UI + Tailwind CSS 3.4, Lucide Icons, Heroicons  
- Build Tools:  
  - Web : Vercel 빌드 파이프라인(Next.js 15 Preset)  
  - Mobile : EAS Build(Android / iOS)

### Backend Technology Stack
- Runtime Environment: Node.js 18(LTS) on Cloud Functions  
- Web Framework: Firebase Cloud Functions (Express Adapter)  
- API Design Pattern: RESTful(HTTPS Callable) + Firestore 실시간 구독  
- Data Validation: Zod 스키마 → 함수 진입 시 런타임 검증  
- Middleware Components:  
  - 인증 확인(Firebase Auth)  
  - 로깅(Stackdriver)  
  - Rate-Limiter(Firestore 기반 Token Bucket)

### Database & Persistence Layer
- Primary Database: Cloud Firestore(Native mode, regional ‑ asia-northeast3)  
- Schema Design: 컬렉션 기반 문서 모델, 중첩 서브컬렉션, 확장 필요 시 sub-collection 분리  
- Caching Strategy:  
  - 클라이언트 단에서 React Query + Firestore persistence cache  
  - Cloud Functions 내부 메모리-LRU(↑콜드스타트 시 캐시 손실 허용)  
- Data Migration: Firebase Emulator + Firestore DART, versioned JS migration 스크립트  
- Backup & Recovery: 자동 일일 백업(GCS), 30일 보관, Disaster復旧 Runbook 확보

### Infrastructure & DevOps
- Hosting Environment:  
  - Web : Vercel(Production / Preview)  
  - Mobile Assets : Expo CDN  
  - Backend : Firebase Project(prod, staging) 다중 환경
- Containerization: 불필요(FaaS)  
- CI/CD Pipeline:  
  - GitHub Actions → Lint/Test → Vercel/Expo/Firebase 배포  
- Monitoring & Observability:  
  - Firebase Performance Monitoring, Cloud Logging, Sentry (Web/App)  
- Logging Strategy:  
  - Cloud Logging → BigQuery Sink → Data Studio Dashboard

## 3. System Architecture Design

### Top-Level Building Blocks
- Web Client (Next.js)  
  - SSR/CSR 하이브리드, SWR 캐시, Firebase Web SDK
- Mobile Client (React Native Expo)  
  - Expo Router, FCM Push, Local DB(AsyncStorage)
- Firebase Auth  
- Email/Password, Google, Kakao, Apple, Naver, Facebook Sign In
- Cloud Firestore  
  - schools, regions, users, posts, comments, reports, xpLogs, leaderboards
- Cloud Functions  
  - 인증트리거, 경험치 계산, 리더보드 정산, 이미지 Moderation
- Firebase Storage  
  - 게시글 이미지, 프로필, 썸네일
- FCM (Firebase Cloud Messaging)  
  - 댓글, 좋아요, 신고 알림

### Top-Level Component Interaction Diagram
```mermaid
graph TD
    A[Web / Mobile Client] -- HTTPS / WebSocket --> B[Firebase Auth & Firestore]
    B -- Trigger --> C[Cloud Functions]
    C -- Read/Write --> B
    A -- Storage SDK --> D[Firebase Storage]
    C -- FCM --> E[Push Service]
```
- 클라이언트는 Firestore 리스너로 실시간 데이터 수신  
- Cloud Functions가 비동기로 경험치·랭킹 계산 후 Firestore 갱신  
- 이미지 업로드는 Storage Signed URL 사용  
- 알림은 Functions → FCM → 디바이스

### Code Organization & Convention

Domain-Driven Organization Strategy
- 사용자, 커뮤니티, 경험치, 게임, 신고, 공통 모듈 세분화
- Presentation ⇆ Application(Service) ⇆ Domain ⇆ Infrastructure 4계층

Universal File & Folder Structure
```
/web
├── src
│   ├── app (Next.js App Router)
│   ├── domains
│   │   ├── community/
│   │   ├── user/
│   │   ├── xp/
│   │   └── shared/
│   └── libs
└── package.json

/mobile
├── src
│   ├── router/
│   ├── domains/ (동일 구조)
│   └── libs/
└── package.json

/functions
├── src
│   ├── community/
│   ├── xp/
│   ├── user/
│   └── utils/
└── package.json

/infrastructure
└── github
    └── workflows
```

### Data Flow & Communication Patterns
- Client-Server: Firebase SDK → Auth Token 포함 HTTPS / WebSocket  
- Database Interaction: Firestore SDK, batched writes & transactions  
- External Service Integration: Vision API(이미지 모더레이션) → Cloud Functions  
- Real-time Communication: Firestore Listener, Presence 판단은 lastSeen 필드 + Cloud Functions  
- Data Synchronization: 모바일 오프라인 캐시 후 재접속 시 sync

## 4. Performance & Optimization Strategy
- Firestore 인덱스 설계: composite index 선선언으로 쿼리 속도 최적화  
- Cloud Functions cold-start 최소화: Node 18, keep-warm scheduler, memory 256 MB  
- 이미지: Storage upload 시 1080px 리사이즈, WebP 변환, CDN 캐싱  
- 클라이언트 렌더링: Next.js Image 최적화, 코드 분할 & lazy import

## 5. Implementation Roadmap & Milestones

### Phase 1: Foundation (MVP) – 3 주
- 인프라: Firebase 프로젝트 & Vercel 연결, 스테이징 환경  
- 핵심 기능: 회원가입(학교·지역 선택), 학교 커뮤니티 글/댓글 CRUD  
- 기본 보안: Firestore Security Rules v1, Auth 구현  
- 개발 세팅: Lint/Prettier, GitHub Actions CI, Storybook  
- 완료 목표: T0 + 3 주

### Phase 2: Feature Enhancement – 5 주
- 기능: 지역·전국 커뮤니티, 경험치·레벨, 리더보드  
- 퍼포먼스: 인덱스 최적화, 이미지 CDN 적용  
- 보안 강화: App Check, Rate Limiter, Content Moderation  
- 모니터링: Sentry, Firebase Performance 완전 도입  
- 완료 목표: T0 + 8 주

### Phase 3: Scaling & Optimization – 4 주
- 스케일링: Cloud Functions 메모리/인스턴스 튜닝, Firestore 파티셔닝  
- 고급 통합: 미니게임, 광고 SDK, FCM 토큰 관리 자동화  
- 엔터프라이즈: 데이터 백업 자동화, SLA Dashboard, IAM 세분화  
- 컴플라이언스: GDPR/한국 개인정보보호 가이드라인 준수  
- 완료 목표: T0 + 12 주

## 6. Risk Assessment & Mitigation Strategies

### Technical Risk Analysis
- 기술 스택 의존성: Firebase 공급자 장애 → 다중 리전 백업  
- 퍼포먼스: Firestore 비용 폭증 → 쿼리 최적화·TTL 아카이브  
- 보안: 인증 우회·권한 상승 → Security Rules 테스트 자동화  
- 통합: 외부 광고 SDK 충돌 → Sandbox 빌드로 사전 검증  
- 대응: 장애 Runbook, RTO 2 h, RPO 24 h

### Project Delivery Risks
- 일정: 학교 개학 시즌 런칭 압박 → 기능 우선순위 조정  
- 리소스: RN·Next.js 동시 개발 인력 부족 → 모듈 재사용 극대화  
- 품질: 테스트 커버리지 저하 → E2E(Cypress, Detox) 70 % 목표  
- 배포: Functions 트래픽 급증 → 단계적 롤아웃, Canary release  
- 비상계획: 기능 플래그로 문제 기능 즉시 비활성화

## 끝
